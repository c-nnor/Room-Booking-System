/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oopa2;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author conno
 */
public class addRoom extends javax.swing.JFrame {
// JFrame class for adding rooms to the list
    
    /**
     * Creates new form addRoom
     */
    public addRoom() {
        initComponents();
        // item listener for radio buttons to update roomID according to users choice for room type 
        rdoLabRoom.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                generateRoomId(); // when item state is changed, generate room is called and roomID is changed, updating live
            }
        });

        rdoLectureHall.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                generateRoomId(); // when item state is changed, generate room is called and roomID is changed, updating live
            }
        });
        
        // document listener for text fields, to update roomID according to users entered values
        txtRoomNo.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                generateRoomId(); // when item state is changed, generate room is called and roomID is changed, updating live
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                generateRoomId(); // when item state is changed, generate room is called and roomID is changed, updating live
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // document listener for text fields, to update roomID according to users entered values
        txtFloor.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                generateRoomId(); // when item state is changed, generate room is called and roomID is changed, updating live
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                generateRoomId(); // when item state is changed, generate room is called and roomID is changed, updating live
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // document listener for text fields, to update roomID according to users entered values
        txtCapacity.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                generateRoomId(); // when item state is changed, generate room is called and roomID is changed, updating live
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                generateRoomId();// when item state is changed, generate room is called and roomID is changed, updating live
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
    }

    // Method to generate room ID according to 
    private void generateRoomId() {
        String roomNo = txtRoomNo.getText();
        String floor = txtFloor.getText();

        if (!roomNo.isEmpty() && !floor.isEmpty() && rdoLabRoom.isSelected()) {
            // Generate room ID by concatenating floor and room number
            String roomId = "Lab" + floor + "-" + roomNo;
            txtRoomID.setText(roomId);
        } else if (!roomNo.isEmpty() && !floor.isEmpty() && rdoLectureHall.isSelected()) {
            String roomId = "Lec" + floor + "-" + roomNo;
            txtRoomID.setText(roomId);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        txtRoomNo = new javax.swing.JTextField();
        txtFloor = new javax.swing.JTextField();
        txtRoomID = new javax.swing.JTextField();
        lblRoomNo = new javax.swing.JLabel();
        lblFloor = new javax.swing.JLabel();
        lblRoomID = new javax.swing.JLabel();
        txtCapacity = new javax.swing.JTextField();
        lblRoomType = new javax.swing.JLabel();
        lblCapacity = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtNoPc = new javax.swing.JTextField();
        lblOS = new javax.swing.JLabel();
        lblNoPc = new javax.swing.JLabel();
        comboOS = new javax.swing.JComboBox<>();
        rdoLectureHall = new javax.swing.JRadioButton();
        rdoLabRoom = new javax.swing.JRadioButton();
        lblMicType = new javax.swing.JLabel();
        lblSeating = new javax.swing.JLabel();
        comboMic = new javax.swing.JComboBox<>();
        comboSeating = new javax.swing.JComboBox<>();
        btnAddRoom = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Room");
        setMinimumSize(new java.awt.Dimension(900, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(txtRoomNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 210, 200, -1));
        getContentPane().add(txtFloor, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 260, 200, -1));

        txtRoomID.setEditable(false);
        getContentPane().add(txtRoomID, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 200, -1));

        lblRoomNo.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblRoomNo.setForeground(new java.awt.Color(255, 255, 255));
        lblRoomNo.setText("Room No:");
        getContentPane().add(lblRoomNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, -1, -1));

        lblFloor.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblFloor.setForeground(new java.awt.Color(255, 255, 255));
        lblFloor.setText("Floor:");
        getContentPane().add(lblFloor, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, -1, -1));

        lblRoomID.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblRoomID.setForeground(new java.awt.Color(255, 255, 255));
        lblRoomID.setText("Room ID:");
        getContentPane().add(lblRoomID, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, -1, -1));
        getContentPane().add(txtCapacity, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 200, -1));

        lblRoomType.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblRoomType.setForeground(new java.awt.Color(255, 255, 255));
        lblRoomType.setText("Room Type:");
        getContentPane().add(lblRoomType, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, -1));

        lblCapacity.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblCapacity.setForeground(new java.awt.Color(255, 255, 255));
        lblCapacity.setText("Capacity:");
        getContentPane().add(lblCapacity, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 310, -1, -1));

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 50, 30, 420));
        getContentPane().add(txtNoPc, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 90, 50, -1));

        lblOS.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblOS.setForeground(new java.awt.Color(255, 255, 255));
        lblOS.setText("Operating System:");
        getContentPane().add(lblOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, -1, -1));

        lblNoPc.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblNoPc.setForeground(new java.awt.Color(255, 255, 255));
        lblNoPc.setText("No. of PC's:");
        getContentPane().add(lblNoPc, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, -1, -1));

        comboOS.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        comboOS.setMaximumRowCount(3);
        comboOS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MS Windows 10 Pro", "Linux", "Ubunto" }));
        comboOS.setToolTipText("Please Select OS");
        comboOS.setBorder(null);
        comboOS.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(comboOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 140, 160, -1));

        buttonGroup1.add(rdoLectureHall);
        rdoLectureHall.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        rdoLectureHall.setForeground(new java.awt.Color(255, 255, 255));
        rdoLectureHall.setText("Lecture Hall");
        rdoLectureHall.setBorder(null);
        rdoLectureHall.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(rdoLectureHall, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, -1, -1));

        buttonGroup1.add(rdoLabRoom);
        rdoLabRoom.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        rdoLabRoom.setForeground(new java.awt.Color(255, 255, 255));
        rdoLabRoom.setText("Lab Room");
        rdoLabRoom.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        getContentPane().add(rdoLabRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 130, -1, -1));

        lblMicType.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblMicType.setForeground(new java.awt.Color(255, 255, 255));
        lblMicType.setText("Microphone Type:");
        getContentPane().add(lblMicType, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 90, -1, -1));

        lblSeating.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        lblSeating.setForeground(new java.awt.Color(255, 255, 255));
        lblSeating.setText("Tiered Seating: ");
        getContentPane().add(lblSeating, new org.netbeans.lib.awtextra.AbsoluteConstraints(533, 140, -1, -1));

        comboMic.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        comboMic.setMaximumRowCount(3);
        comboMic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lectern microphone.", "Lapel (clip-on) microphone", "Handheld or roaming microphone" }));
        comboMic.setToolTipText("Please Select OS");
        comboMic.setBorder(null);
        comboMic.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(comboMic, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 90, 160, -1));

        comboSeating.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        comboSeating.setMaximumRowCount(2);
        comboSeating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        comboSeating.setToolTipText("Please Select OS");
        comboSeating.setBorder(null);
        comboSeating.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        comboSeating.setName(""); // NOI18N
        getContentPane().add(comboSeating, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 140, 160, -1));

        btnAddRoom.setBackground(new java.awt.Color(242, 242, 242));
        btnAddRoom.setFont(new java.awt.Font("Arial Narrow", 0, 24)); // NOI18N
        btnAddRoom.setText("Add Room");
        btnAddRoom.setBorder(null);
        btnAddRoom.setFocusable(false);
        btnAddRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoomActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 390, 140, 60));

        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText(" ← Back  ");
        btnBack.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        btnBack.setContentAreaFilled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 60, 20));

        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("⏏ Exit ");
        btnExit.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        btnExit.setContentAreaFilled(false);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 60, 20));

        bg.setForeground(new java.awt.Color(255, 255, 255));
        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/pg bg.png"))); // NOI18N
        bg.setText("bg");
        bg.setOpaque(true);
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // event for when window is opened
        // sets labroom and lecturehall specific texts fields and labels until they confirm their room type
        lblNoPc.setVisible(false);
        txtNoPc.setVisible(false);
        comboOS.setVisible(false);
        lblOS.setVisible(false);
        lblMicType.setVisible(false);
        comboMic.setVisible(false);
        lblSeating.setVisible(false);
        comboSeating.setVisible(false);
        rdoLabRoom.setOpaque(false);
        rdoLectureHall.setOpaque(false);
        // radio button listener to update fields when room type is changed
        ItemListener radioItemListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (rdoLabRoom.isSelected()) {
                    // If rdoLabRoom1 is selected, set visibility of lblNoPc, txtNoPc, comboOS, and lblOS to true
                    lblNoPc.setVisible(true);
                    txtNoPc.setVisible(true);
                    comboOS.setVisible(true);
                    lblOS.setVisible(true);

                    // Set visibility of lblMicType, comboMic, lblSeating, and comboSeating to false
                    lblMicType.setVisible(false);
                    comboMic.setVisible(false);
                    lblSeating.setVisible(false);
                    comboSeating.setVisible(false);
                } else if (rdoLectureHall.isSelected()) {
                    // If rdoLectureHall is selected, set visibility of lblMicType, comboMic, lblSeating, and comboSeating to true
                    lblMicType.setVisible(true);
                    comboMic.setVisible(true);
                    lblSeating.setVisible(true);
                    comboSeating.setVisible(true);

                    // Set visibility of lblNoPc, txtNoPc, comboOS, and lblOS to false
                    lblNoPc.setVisible(false);
                    txtNoPc.setVisible(false);
                    comboOS.setVisible(false);
                    lblOS.setVisible(false);
                }
            }
        };

        rdoLabRoom.addItemListener(radioItemListener);
        rdoLectureHall.addItemListener(radioItemListener);

    }//GEN-LAST:event_formWindowOpened

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // Button allows users to navigate to previous menu
        this.setVisible(false);
        roomMenu rm = new roomMenu();
        rm.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoomActionPerformed
        try {
            // creating an instance of room to access exception handling methods
            room roomObj = new room();
            
            // grabing text values and assigning them to variables
            String roomId = txtRoomID.getText();
            String roomNoText = txtRoomNo.getText();
            String floorText = txtFloor.getText();
            String capacityText = txtCapacity.getText();
            
            // Check that the room doesnt already exist, accesses method in room class
            if (roomObj.isValidRoom(roomId)){
                // error message promted
                JOptionPane.showMessageDialog(rootPane, "This room already exists \n\nRoom ID: " + roomId + "\nRoom Number: " + roomNoText + "\nFloor: " + floorText, "Error", JOptionPane.ERROR_MESSAGE);
                return; // exits the method if room already exits
            }
            // Check that the roomNotext only contains numeric values
            if (!roomNoText.matches("\\d+")) {
                // error message promted
                JOptionPane.showMessageDialog(rootPane, "Room number must contain only valid numeric digits.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // exits the method if roomNumber contains anything other than numeric values
            }
            // Check that the floorText only contains numeric values
            if (!floorText.matches("\\d+")) {
                // error message promted
                JOptionPane.showMessageDialog(rootPane, "Floor must contain only valid numeric digits.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // exits the method if floor contains anything other than numeric values
            }
            // Check that the capacity only contains numeric values
            if (!capacityText.matches("\\d+")) {
                // error message promted
                JOptionPane.showMessageDialog(rootPane, "Capacity must contain only valid numeric digits.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // exits the method if the capacity contains anything other than numeric values
            }
            // Setting NoPcs to 0 to prevent errors when trying create a Lab Room
            int NoPc = 0;
            String noPcText = txtNoPc.getText().trim();
            if (!noPcText.isEmpty()) {
                // Check if noPcText only contains numeric digits
                if (!noPcText.matches("\\d+")) {
                    // error message promted
                    JOptionPane.showMessageDialog(rootPane, "Number of PCs must contain only numeric digits.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // exits the method if the number of pcs contains anything other valid than numeric values
                }
                NoPc = Integer.valueOf(noPcText); // parses the String input into an Integer
            }
            String os = comboOS.getSelectedItem().toString();
            String microphoneType = comboMic.getSelectedItem().toString();
            boolean tieredSeating = comboSeating.getSelectedIndex() == 0; // true if index is 0,  else false if 1
            
            // Check if inputed room number is acceptable
            if (Integer.parseInt(txtRoomNo.getText()) < 1 || (Integer.parseInt(txtRoomNo.getText()) > 30 )){
                JOptionPane.showMessageDialog(rootPane, "Please enter a valid room number - Between 1 - 30", "Error", JOptionPane.ERROR_MESSAGE);
                return; // exits the method if the room number is not valid
            }
            // Check if inputed floor number is acceptable
            if (Integer.parseInt(txtFloor.getText()) < 1 || (Integer.parseInt(txtFloor.getText()) > 30 )){
                JOptionPane.showMessageDialog(rootPane, "Please enter a valid floor number - Between 1 - 30", "Error", JOptionPane.ERROR_MESSAGE);
                return; // exits the method if the floor number is not valid
            }
            // Check if inputed capacity is acceptable
            if (Integer.parseInt(txtCapacity.getText()) < 1 || (Integer.parseInt(txtCapacity.getText()) > 50 )){
                JOptionPane.showMessageDialog(rootPane, "Please enter a valid capacity - Between 1 - 50", "Error", JOptionPane.ERROR_MESSAGE);
                return; // exits the method if the capacity is not valid
            }

            // Room type selection
            // Lab room choice
            if (rdoLabRoom.isSelected()) {
                // Object created, filled with users input and passed to global list contain in AppLib
                labRoom labRoomObj = new labRoom(roomId, Integer.parseInt(roomNoText), Integer.parseInt(floorText), Integer.parseInt(capacityText), NoPc, os);
                AppLib.labRoomLst.add(labRoomObj);
            // Lecture hall choice    
            } else if (rdoLectureHall.isSelected()) {
                lectureHall lectureHallObj = new lectureHall(roomId, Integer.parseInt(roomNoText), Integer.parseInt(floorText), Integer.parseInt(capacityText), microphoneType, tieredSeating);
                AppLib.lectureHallLst.add(lectureHallObj);
            }

            // Success promt with the choice to continue or return to menu
            int option = JOptionPane.showConfirmDialog(rootPane, "Room added successfully! Do you want to add another room?", "Success", JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                // If user chooses to add another room, clear the fields for adding another room
                txtRoomNo.setText("");
                txtFloor.setText("");
                txtCapacity.setText("");
                txtNoPc.setText("");
                txtRoomID.setText(""); 
            } else {
                // If user chooses not to add another room, program goes back to the previous menu
                this.setVisible(false);
                roomMenu rm = new roomMenu();
                rm.setVisible(true);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(rootPane, "Room number, floor, capacity, and number of PCs must be numeric values.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnAddRoomActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // Button method to exit the program
        // Option to confirm action
        int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to exit?", "Alert", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            this.dispose();
        } else if (option == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(rootPane, "Okay, exit  terminated", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addRoom().setVisible(true);

            }
        }
        );
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bg;
    private javax.swing.JButton btnAddRoom;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboMic;
    private javax.swing.JComboBox<String> comboOS;
    private javax.swing.JComboBox<String> comboSeating;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCapacity;
    private javax.swing.JLabel lblFloor;
    private javax.swing.JLabel lblMicType;
    private javax.swing.JLabel lblNoPc;
    private javax.swing.JLabel lblOS;
    private javax.swing.JLabel lblRoomID;
    private javax.swing.JLabel lblRoomNo;
    private javax.swing.JLabel lblRoomType;
    private javax.swing.JLabel lblSeating;
    private javax.swing.JRadioButton rdoLabRoom;
    private javax.swing.JRadioButton rdoLectureHall;
    private javax.swing.JTextField txtCapacity;
    private javax.swing.JTextField txtFloor;
    private javax.swing.JTextField txtNoPc;
    private javax.swing.JTextField txtRoomID;
    private javax.swing.JTextField txtRoomNo;
    // End of variables declaration//GEN-END:variables
}
